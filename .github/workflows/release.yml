name: Release
on: workflow_dispatch
permissions:
  contents: read

jobs:
  prepare:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.update-version.outputs.version }}
      head_sha: ${{ steps.push_release.outputs.head_sha }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Update version
        id: update-version
        run: |
          python devscripts/update-version.py | grep -Po "version=\d+\.\d+\.\d+(\.\d+)?" >> "$GITHUB_OUTPUT"
          make issuetemplates

      - name: Push to release
        id: push_release
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@example.com
          git add -u
          git commit -m "[version] update" -m "Created by: ${{ github.event.sender.login }}" -m ":ci skip all :ci run dl"
          git push origin --force ${{ github.event.ref }}:release
          echo "head_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Update master
        if: vars.PUSH_VERSION_COMMIT != ''
        run: git push origin ${{ github.event.ref }}

  publish_pypi_homebrew:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Requirements
        run: |
          # TODO: Investigate required installs
          sudo apt-get -y install zip pandoc man sed
          python -m pip install -U pip setuptools wheel twine
          python -m pip install -U Pyinstaller -r requirements.txt

      - name: Prepare
        run: |
          python devscripts/update-version.py ${{ needs.prepare.outputs.version }}
          python devscripts/make_lazy_extractors.py

      - name: Build and publish on PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        if: env.TWINE_PASSWORD != ''
        run: |
          rm -rf dist/*
          python devscripts/set-variant.py pip -M "You installed yt-dlp with pip or using the wheel from PyPi; Use that to update"
          python setup.py sdist bdist_wheel
          twine upload dist/*

      - name: Install SSH private key for Homebrew
        env:
          BREW_TOKEN: ${{ secrets.BREW_TOKEN }}
        if: env.BREW_TOKEN != ''
        uses: yt-dlp/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ env.BREW_TOKEN }}

      - name: Update Homebrew Formulae
        env:
          BREW_TOKEN: ${{ secrets.BREW_TOKEN }}
        if: env.BREW_TOKEN != ''
        run: |
          git clone git@github.com:yt-dlp/homebrew-taps taps/
          python devscripts/update-formulae.py taps/Formula/yt-dlp.rb "${{ needs.prepare.outputs.version }}"
          git -C taps/ config user.name github-actions
          git -C taps/ config user.email github-actions@example.com
          git -C taps/ commit -am 'yt-dlp: ${{ needs.prepare.outputs.version }}'
          git -C taps/ push

  build:
    needs: prepare
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.prepare.outputs.version }}
    permissions:
      contents: read
      packages: write # For package cache

  publish:
    needs: [prepare, build]
    uses: ./.github/workflows/publish.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.prepare.outputs.version }}
      target_commitish: ${{ needs.prepare.outputs.head_sha }}
